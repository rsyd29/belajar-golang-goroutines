Range Channel
1. Kadang-kadang ada kasus sebuah channel dikirim data secara terus menerus oleh pengirim.
2. Dan kadang tidak jelas kapan channel tersebut akan berhenti menerima data.
3. Salah satu yang bisa kita lakukan adalah dengan menggunakan perulangan range ketika
menerima data dari channel.
4. Ketika sebuah channel di close(), maka secara otomatis perulangan tersebut akan berhenti.
5. Ini lebih sederhana dari pada kita melakukan pengecekkan channel secara manual.

Kode: Range Channel
channel := make(chan string)

go func() {
    for i := 0; i < 10; i++ {
        channel <- "Perulangan ke " + strconv.Itoa(i)
    }
    close(channel)
}()

for data := range channel {
    fmt.Println(data)
}
fmt.Println("DONE")

// Range Channel
func TestRangeChannel(t *testing.T) {
	channel := make(chan string) // membuat channel tanpa buffered channel
	/**
	tanpa range channel
	data := <- channel
	data := <- channel
	dst
	pertanyaanya mau berapa kali akses memasukkan data channel ke dalam var data?
	 */
	// membuat goroutine untuk anonymous function
	go func() {
		// membuat perulangan sampai 10 kali
		for i := 0; i < 10; i++ {
			// akan mengirim datanya ke dalam channel
			channel <- "Perulangan ke " + strconv.Itoa(i) // strconv untuk konversi dari int ke string
		}
		// setelah mengirim kita akan close channel
		close(channel)
		// kalau tidak di close maka perulangan data yang di bawah maka tidak akan pernah berhenti
	}()
	// daripada seperti di atas lebih baik seperti ini lakukan perulangan
	for data := range channel {
		fmt.Println("Menerima data ", data)
	}
	// kita tidak perlu sleep karena data diatas akan diulang terus sampai close
	fmt.Println("Selesai")
}

Note:
Apabila data channelnya banyak lebih baik gunakan range channel
