Buffered Channel
1. Seperti yang dijelaskan sebelumnya, bahwa secara default channel itu hanya bisa menerima
1 data.
2. Artinya jika kita menambah data ke-2, maka kita akan diminta menunggu sampai data ke-1
ada yang mengambil.
3. Kadang-kadang ada kasus dimana pengirim lebih cepat dibanding penerima, dalam hal ini
jika kita menggunakan channel, maka otomatis pengirim akan ikut lambat juga.
4. Alhamdulillah-nya ada Buffered Channel, yaitu buffer yang bisa digunakan untuk menampung
data antrian di Channel.

Buffer Capacity
1. Kita bebas memasukkan berapa jumlah kapasitas antrian di dalam buffer.
Harus bijak, jangan terlalu besar juga kapasitas antriannya. Seperlunya saja.
2. Jika kita set misal 5, artinya kita bisa menerima 5 data di buffer.
3. Jika kita mengirim data ke-6, maka kita diminta untuk menunggu sampai buffer ada yang
kosong.
4. Ini cocok sekali ketika memang goroutine yang menerima data lebih lambat dari yang
mengirim data.

Diagram Channel Buffer.
Jadi misalkan ada 2 goroutine, dimana goroutine dapat mengirim dan menerima data.
Lalu di dalam channel terdapat sebuah buffer yang di set menjadi kapasitasnya 4 data.
Apabila data telah penuh, 4 slot itu telah terisi, apabila ada data baru, maka data baru
itu harus menunggu terlebih dahulu hingga ada slot yang sudah diterima oleh goroutine
yang menerima. Sampai salah satu dislot tersebut kosong.

Kode: Membuat Buffered Channel
channel := make(chan string, 3) // 3 disitu ukuran kapasitas buffernya
fmt.Println(cap(channel)) // melihat jumlah kapasitas buffer
fmt.Println(len(channel)) // melihat jumlah data di buffer, jadi apabila ada data yang sudah terisi 2 buffer maka jumlah datanya ada 2.

// Buffered Channel
func TestBufferedChannel(t *testing.T) {
	channel := make(chan string, 3)
	defer close(channel)

	go func() { // membuat goroutine dengan anonymous function untuk mengirim data ke channel
		// jadi apabila kita blm membuat buffer di channel tersebut maka
		// akan terjadi error deadlock
		channel <- "Budiman"
		channel <- "Rasyid"
		channel <- "Zainuddin"
	}() // () untuk menjalankan anonymous function

	go func() { // membuat goroutine dengan anonymous function untuk menerima data dari channel
		// selanjutnya kita ambil channel tersebut
		fmt.Println(<- channel)
		fmt.Println(<- channel)
		fmt.Println(<- channel)
		// lalu apabila datanya diambil lagi, padahal datanya sudah kosong, maka akan terjadi error
		// fmt.Println(<- channel)
	}() // () untuk menjalankan anonymous function

	time.Sleep(2 * time.Second) // sleep selama 2 detik untuk menunggu goroutine dijalankan
	fmt.Println("Selesai")
	// lalu apabila kita menambahkan buffer, maka seakan-akan datanya itu
	// masuk ke dalam slot buffer terlebih dahulu
}

/**
NOTE:
Jadi ada sedikit berbeda sama channel yang biasa, kalau channel biasa
apabila datanya masuk ke dalam channel, itu karena dia tidak punya
buffer, maka otomatis dia diminta untuk menunggu sampai ada yang
mengambil.

Kalau channel tersebut ditambahkan buffer itu otomatis akan masuk
ke dalam slot channel buffer, jadi tidak perlu menunggu lagi, kecuali
slot buffernya sudah penuh tidak ada yang kosong, baru diminta untuk
menunggu.
 */