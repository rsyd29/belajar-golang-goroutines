Deadlock -> terjadi apabila salah melakukan implementasi mutex atau locking
1. Hati-hati saat membuat aplikasi yang parallel atau concurrent, masalah yang sering kita hadapi adalah Deadlock.
2. Deadlock adalah keadaan dimana sebuah proses goroutine saling menunggu lock sehingga tidak ada satupun goroutine yang
bisa jalan.
Jadi biasanya ada 1 goroutine melakukan locking, ternyata dia membutuhkan locking lagi untuk data selanjutnya, dan
ternyata data selanjutnya itu sudah di locking oleh goroutine yang lain. Artinya goroutine yang pertama itu menunggu
goroutine yang lain. Lalu goroutine yang lain tersebut melakukan lock juga terhadap data yang pertama, artinya dia
menunggu data yang pertama, jadi data goroutine pertama dan kedua, ia kedua duanya saling lock. Akhirnya dua-duanya
saling menunggu satu sama lain dan terjadilah proses deadlock. Jadi sama sekali tidak gerak dari proses goroutine-nya.
Jadi kejadian dimana 2 goroutine saling menunggu satu sama lain. Itu sebagian dikarenakan proses locking.
3. Sekarang kita coba simulasikan proses deadlock.

// Proses Deadlock
type UserBalance struct { // Membuat struct dengan nama UserBalance
	// dengan field diantaranya
	sync.Mutex
	Name    string
	Balance int
}

func (user *UserBalance) Lock()  {  // Membuat method Lock untuk proses Mutex Unlock terhadap UserBalance
	user.Mutex.Lock()
}

func (user *UserBalance) Unlock()  { // Membuat method Unlock untuk proses Mutex Unlock terhadap UserBalance
	user.Mutex.Unlock()
}

func (user *UserBalance) Change(amount int)  { // membuat method Change dengan parameter amount, untuk struct UserBalance yang diberi nama user
	user.Balance = user.Balance + amount // merubah balance dari UserBalance untuk ditambahkan
}

func Transfer(user1 *UserBalance, user2 *UserBalance, amount int) { // membuat sebuah func Transfer dengan 3 parameter; user1, user2, dan amount
	user1.Lock() // lock untuk user1
	fmt.Println("Lock user1", user1.Name) // print lock user1 beserta namanya
	user1.Change(-amount) // merubah balancenya untuk dikurang

	time.Sleep(1 * time.Second) // sleep selama 1 detik untuk menunggu proses lock user1

	user2.Lock() // lock untuk user2
	fmt.Println("Lock user2", user2.Name) // print lock user2 beserta namanya
	user2.Change(amount) // merubah balancenya untuk ditambah

	time.Sleep(1 * time.Second) // sleep selama 1 detik untuk menunggu proses lock user2

	user1.Unlock() // Untuk unlock user1
	user2.Unlock() // Untuk unlock user2
}

func TestDeadLock(t *testing.T) { // Membuat testing
	user1 := UserBalance{ // initial UserBalance dan dimasukkan ke dalam var user1
		Name: "Budiman",
		Balance: 1000000,
	}

	user2 := UserBalance{ // initial UserBalance dan dimasukkan ke dalam var user2
		Name: "Rasyid",
		Balance: 1000000,
	}

	// proses goroutine terhadap function Transfer yang berisikan 3 parameter
	go Transfer(&user1, &user2, 100000)
	go Transfer(&user2, &user1, 200000)
	/**
	Proses diatas adalah kejadian deadlock, dimana goroutine pertama melakukan lock terhadap user1
	dan goroutine kedua melakukan lock terhadap user2, ini pada saat bersamaan.
	Selanjutnya goroutine pertama pada parameter kedua dia melakukan lock terhadap user2
	dan akhirnya saling menunggu.

	Output Programnya
	=== RUN   TestDeadLock
	Lock user1 Rasyid
	Lock user1 Budiman
	User Budiman Balance 900000
	User Rasyid Balance 800000
	--- PASS: TestDeadLock (3.00s)
	PASS

	Tidak ada lock user2 dikarenakan lock user2 menunggu proses unlock user1
	*/

	time.Sleep(3 * time.Second)

	fmt.Println("User", user1.Name, "Balance", user1.Balance)
	fmt.Println("User", user2.Name, "Balance", user2.Balance)
}