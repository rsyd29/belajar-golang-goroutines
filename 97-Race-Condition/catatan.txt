Race Condition -> Sebuah masalah dengan goroutine
1. Saat kita menggunakan goroutine, dia tidak hanya berjalan secara concurrent, tapi bisa parallel juga, karena bisa ada
beberapa thread yang berjalan secara parallel.
2. Hal ini sangat berbahaya ketika kita melakukan manipulasi data variable yang sama oleh beberapa goroutine secara
bersamaan.
3. Hal ini bisa menyebabkan masalah yang namanya Race Condition.
Jadi apabila ada perubahan data yang dilakukan oleh goroutine terhadap satu variable yang sama (sharing variable), jadi
satu variable ke beberapa goroutine.

Lalu bagaimana caranya menangani race condition ini di Go-Lang?

Kode: Problem yang mengakibatkan Race Condition
var x = 0
for i := 1; i <= 1000; i++ {
    go func() {
        for j := 1; j <= 100; j++ {
            x = x + 1
            // output 100000, karena melakukan perulangan pertama sebanyak 1000 dan perulangan kedua sebanyak 100
        }
    }()
}
time.Sleep(5 * time.Second)
fmt.Println("Counter : ", x)

// Race Condition
func TestRaceCondition(t *testing.T) {
	x := 0

	for i := 1; i <= 1000; i++ {
		go func() {
			for j := 1; j <= 100; j++ {
				x = x + 1
				fmt.Printf("x = %d + 1\n", x)
			}
		}()
	}

	time.Sleep(5 * time.Second)
	fmt.Println("Counter : ", x)
	/**
	Outputnya berubah rubah x nya, kenapa bisa seperti itu? kita punya satu variable yaitu variable x, dimana variable
	itu di sharing ke beberapa goroutine bahkan sampai 1000 goroutine yang mengakses variable yang sama yaitu untuk
	melakukan increment pada variable x. Lalu dimanipulasi variable tersebut yaitu var x. Jadi bisa saja ada 1 goroutine
	mengakses data dengan value x nya yang akhirannya itu tetap sama juga.
	Misal ada goroutine mengakses
	x = 1000 + 1
	lalu ada goroutine lain mengakses itu pula yaitu x = 1000 + 1 juga
	karena ini kan parallel, lalu bagaimana ada 15K data yang sama untuk menaikkan counter secara bersamaan.
	Maka itu sangat berbahaya sekali.
	Oleh karena itu solusinya adalah di materi selanjutnya
	*/
}
